package com.db.dao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.db.dao.CallDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CALL_DETAIL".
*/
public class CallDetailDao extends AbstractDao<CallDetail, Long> {

    public static final String TABLENAME = "CALL_DETAIL";

    /**
     * Properties of entity CallDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property Local = new Property(3, String.class, "local", false, "LOCAL");
        public final static Property Cate = new Property(4, String.class, "cate", false, "CATE");
        public final static Property CallTime = new Property(5, String.class, "callTime", false, "CALL_TIME");
        public final static Property BackTime = new Property(6, long.class, "backTime", false, "BACK_TIME");
        public final static Property EntryTime = new Property(7, long.class, "entryTime", false, "ENTRY_TIME");
        public final static Property CallResult = new Property(8, int.class, "callResult", false, "CALL_RESULT");
        public final static Property Type = new Property(9, int.class, "type", false, "TYPE");
        public final static Property IsDeleted = new Property(10, boolean.class, "isDeleted", false, "IS_DELETED");
    }


    public CallDetailDao(DaoConfig config) {
        super(config);
    }
    
    public CallDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CALL_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"PHONE\" TEXT," + // 2: phone
                "\"LOCAL\" TEXT," + // 3: local
                "\"CATE\" TEXT," + // 4: cate
                "\"CALL_TIME\" TEXT," + // 5: callTime
                "\"BACK_TIME\" INTEGER NOT NULL ," + // 6: backTime
                "\"ENTRY_TIME\" INTEGER NOT NULL ," + // 7: entryTime
                "\"CALL_RESULT\" INTEGER NOT NULL ," + // 8: callResult
                "\"TYPE\" INTEGER NOT NULL ," + // 9: type
                "\"IS_DELETED\" INTEGER NOT NULL );"); // 10: isDeleted
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CALL_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CallDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String local = entity.getLocal();
        if (local != null) {
            stmt.bindString(4, local);
        }
 
        String cate = entity.getCate();
        if (cate != null) {
            stmt.bindString(5, cate);
        }
 
        String callTime = entity.getCallTime();
        if (callTime != null) {
            stmt.bindString(6, callTime);
        }
        stmt.bindLong(7, entity.getBackTime());
        stmt.bindLong(8, entity.getEntryTime());
        stmt.bindLong(9, entity.getCallResult());
        stmt.bindLong(10, entity.getType());
        stmt.bindLong(11, entity.getIsDeleted() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CallDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String local = entity.getLocal();
        if (local != null) {
            stmt.bindString(4, local);
        }
 
        String cate = entity.getCate();
        if (cate != null) {
            stmt.bindString(5, cate);
        }
 
        String callTime = entity.getCallTime();
        if (callTime != null) {
            stmt.bindString(6, callTime);
        }
        stmt.bindLong(7, entity.getBackTime());
        stmt.bindLong(8, entity.getEntryTime());
        stmt.bindLong(9, entity.getCallResult());
        stmt.bindLong(10, entity.getType());
        stmt.bindLong(11, entity.getIsDeleted() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CallDetail readEntity(Cursor cursor, int offset) {
        CallDetail entity = new CallDetail();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CallDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLocal(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCallTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBackTime(cursor.getLong(offset + 6));
        entity.setEntryTime(cursor.getLong(offset + 7));
        entity.setCallResult(cursor.getInt(offset + 8));
        entity.setType(cursor.getInt(offset + 9));
        entity.setIsDeleted(cursor.getShort(offset + 10) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CallDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CallDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CallDetail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
