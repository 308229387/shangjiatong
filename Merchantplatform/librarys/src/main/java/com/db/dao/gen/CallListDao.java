package com.db.dao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.db.dao.CallList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CALL_LIST".
*/
public class CallListDao extends AbstractDao<CallList, Long> {

    public static final String TABLENAME = "CALL_LIST";

    /**
     * Properties of entity CallList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property PhoneCount = new Property(3, int.class, "phoneCount", false, "PHONE_COUNT");
        public final static Property CallResult = new Property(4, int.class, "callResult", false, "CALL_RESULT");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
        public final static Property Local = new Property(6, String.class, "local", false, "LOCAL");
        public final static Property Cate = new Property(7, String.class, "cate", false, "CATE");
        public final static Property CallTime = new Property(8, String.class, "callTime", false, "CALL_TIME");
    }


    public CallListDao(DaoConfig config) {
        super(config);
    }
    
    public CallListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CALL_LIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"PHONE\" TEXT," + // 2: phone
                "\"PHONE_COUNT\" INTEGER NOT NULL ," + // 3: phoneCount
                "\"CALL_RESULT\" INTEGER NOT NULL ," + // 4: callResult
                "\"TYPE\" INTEGER NOT NULL ," + // 5: type
                "\"LOCAL\" TEXT," + // 6: local
                "\"CATE\" TEXT," + // 7: cate
                "\"CALL_TIME\" TEXT);"); // 8: callTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CALL_LIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CallList entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
        stmt.bindLong(4, entity.getPhoneCount());
        stmt.bindLong(5, entity.getCallResult());
        stmt.bindLong(6, entity.getType());
 
        String local = entity.getLocal();
        if (local != null) {
            stmt.bindString(7, local);
        }
 
        String cate = entity.getCate();
        if (cate != null) {
            stmt.bindString(8, cate);
        }
 
        String callTime = entity.getCallTime();
        if (callTime != null) {
            stmt.bindString(9, callTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CallList entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
        stmt.bindLong(4, entity.getPhoneCount());
        stmt.bindLong(5, entity.getCallResult());
        stmt.bindLong(6, entity.getType());
 
        String local = entity.getLocal();
        if (local != null) {
            stmt.bindString(7, local);
        }
 
        String cate = entity.getCate();
        if (cate != null) {
            stmt.bindString(8, cate);
        }
 
        String callTime = entity.getCallTime();
        if (callTime != null) {
            stmt.bindString(9, callTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CallList readEntity(Cursor cursor, int offset) {
        CallList entity = new CallList();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CallList entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhoneCount(cursor.getInt(offset + 3));
        entity.setCallResult(cursor.getInt(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
        entity.setLocal(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCallTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CallList entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CallList entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CallList entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
