package com.db.dao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.db.dao.SystemNotificationDetial;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYSTEM_NOTIFICATION_DETIAL".
*/
public class SystemNotificationDetialDao extends AbstractDao<SystemNotificationDetial, Long> {

    public static final String TABLENAME = "SYSTEM_NOTIFICATION_DETIAL";

    /**
     * Properties of entity SystemNotificationDetial.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property ContentType = new Property(3, int.class, "contentType", false, "CONTENT_TYPE");
        public final static Property Describe = new Property(4, String.class, "describe", false, "DESCRIBE");
        public final static Property SortId = new Property(5, Long.class, "sortId", false, "SORT_ID");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(7, int.class, "type", false, "TYPE");
        public final static Property IsReaded = new Property(8, int.class, "isReaded", false, "IS_READED");
    }


    public SystemNotificationDetialDao(DaoConfig config) {
        super(config);
    }
    
    public SystemNotificationDetialDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYSTEM_NOTIFICATION_DETIAL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"CONTENT\" TEXT," + // 2: content
                "\"CONTENT_TYPE\" INTEGER NOT NULL ," + // 3: contentType
                "\"DESCRIBE\" TEXT," + // 4: describe
                "\"SORT_ID\" INTEGER," + // 5: sortId
                "\"TITLE\" TEXT," + // 6: title
                "\"TYPE\" INTEGER NOT NULL ," + // 7: type
                "\"IS_READED\" INTEGER NOT NULL );"); // 8: isReaded
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYSTEM_NOTIFICATION_DETIAL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SystemNotificationDetial entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
        stmt.bindLong(4, entity.getContentType());
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(5, describe);
        }
 
        Long sortId = entity.getSortId();
        if (sortId != null) {
            stmt.bindLong(6, sortId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
        stmt.bindLong(8, entity.getType());
        stmt.bindLong(9, entity.getIsReaded());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SystemNotificationDetial entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
        stmt.bindLong(4, entity.getContentType());
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(5, describe);
        }
 
        Long sortId = entity.getSortId();
        if (sortId != null) {
            stmt.bindLong(6, sortId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
        stmt.bindLong(8, entity.getType());
        stmt.bindLong(9, entity.getIsReaded());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SystemNotificationDetial readEntity(Cursor cursor, int offset) {
        SystemNotificationDetial entity = new SystemNotificationDetial();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SystemNotificationDetial entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContentType(cursor.getInt(offset + 3));
        entity.setDescribe(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSortId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.getInt(offset + 7));
        entity.setIsReaded(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SystemNotificationDetial entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SystemNotificationDetial entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SystemNotificationDetial entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
